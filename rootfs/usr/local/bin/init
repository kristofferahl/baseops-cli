#!/usr/bin/env bash

export COLORTERM=truecolor
export TERM=xterm-256color

init() {
  local -r foreground=212
  local -r border=44

  echo
  figurine -f Colossal.flf baseops-cli | sed "s/^/  /"
  echo
  gum style --foreground 10 "# baseops-cli ${BASEOPS_CLI_VERSION:?}"

  gum style --foreground ${foreground:?} --margin "1 0" \
    'So you need a new cli?' \
    "We can help with that! Let's collect some intel first..."

  local name
  local description
  local banner
  local image_name
  local image_tag
  local image_registry='index.docker.io'
  local image_architectures=()
  local image_platforms=()
  local image_platforms_str=''

  while [[ "${name}" == '' ]]; do
    name=$(gum input --prompt "? What do you want to call your cli: " --placeholder "name")
  done

  while [[ "${description}" == '' ]]; do
    description=$(gum input --prompt "? Describe the cli: " --placeholder "description" --value "CLI for the ${name:?} project")
  done

  while [[ "${banner}" == '' ]]; do
    banner=$(gum input --prompt "? What banner do you want for your prompt: " --placeholder "banner" --value "${name:?}")
  done

  while [[ "${image_name}" == '' ]]; do
    image_name=$(gum input --prompt "? What should we name your docker image: " --placeholder "kristofferahl/${name:?}" --value "kristofferahl/${name:?}")
  done

  while [[ "${image_tag}" == '' ]]; do
    image_tag=$(gum input --prompt "? How should we tag your docker image: " --placeholder "v1.0.0" --value "v1.0.0")
  done

  while [[ ${#image_architectures[@]} -le 0 ]]; do
    mapfile -t image_architectures < <(printf 'amd64\narm64' | gum choose --header "? What architectures should the image support:" --no-limit)
  done

  for architecture in "${image_architectures[@]}"; do
    image_platforms+=("linux/${architecture:?}")
  done

  image_platforms_str="$(
    IFS=,
    echo "${image_platforms[*]}"
  )"

  gum style \
    --foreground ${foreground:?} --border-foreground ${border:?} --border normal \
    --align left --width 80 --padding "1 2" \
    "name              : ${name:?'A name must be provided'}" \
    "description       : ${description:?'A description must be provided'}" \
    "banner            : ${banner:?'A banner must be provided'}" \
    '' \
    "docker image name : ${image_name:?'A docker image name must be provided'}" \
    "docker image tag  : ${image_tag:?'A docker image tag must be provided'}" \
    "docker platforms  : ${image_platforms_str:?'A platform must be provided'}" \
    "docker registry   : ${image_registry:?'A registry must be provided'}"

  if ! gum confirm "Are you good with this?"; then
    exit 1
  fi

  export CLI_NAME="${name:?}"
  export CLI_DESCRIPTION="${description:?}"
  export CLI_BANNER="${banner:?}"
  export CLI_IMAGE_NAME="${image_name:?}"
  export CLI_IMAGE_TAG="${image_tag:?}"
  export CLI_IMAGE_REGISTRY="${image_registry:?}"
  export CLI_IMAGE_PLATFORMS="${image_platforms_str:?}"
  export CLI_VERSION_VAR="\${${CLI_NAME:?}_VERSION:?}"
  export OUTPUT_DIR="${OUTPUT_DIR:-/work}"

  echo
  gum style --foreground ${foreground:?} \
    "Scaffolding ${CLI_NAME:?} with gomplate..." \
    "Your files will be written to ${OUTPUT_DIR:?}!"

  pushd /etc/baseops-cli/templates 1>/dev/null || exit 1
  gomplate --input-dir=. --output-dir="${OUTPUT_DIR:?}" --datasource config=/etc/baseops-cli/gomplate-config.yaml
  popd 1>/dev/null || exit 1

  mv "${OUTPUT_DIR:?}/baseops-cli" "${OUTPUT_DIR:?}/${CLI_NAME:?}"

  declare hostdir="${OUTPUT_DIR:?}"
  hostdir="${hostdir/\/work/}"
  [[ "${hostdir}" =~ / ]] && hostdir="${hostdir:1}"
  [[ "${hostdir}" != '' ]] && hostdir="cd ${hostdir} && "

  gum style \
    --foreground ${foreground:?} --border-foreground ${border:?} --border normal \
    --align left --width 80 --margin "1 1 0 1" --padding "1 2" \
    "Scaffolding was successful!" \
    'Next up, build the docker image by running the following...' \
    '' \
    "${hostdir:-}./${CLI_NAME:?} baseops build"
}

init "$@"
