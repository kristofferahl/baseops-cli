#!/usr/bin/env bash

set -euo pipefail

declare -r git_tag="$(git describe --tags --abbrev=0)"
declare -r head_count=$(git rev-list --count HEAD)
declare -r tag_count=$(git rev-list --count "${git_tag:?}")
declare -r count_diff=$((${head_count:?} - ${tag_count:?}))
declare release_version="${git_tag:?}"
declare tag_latest=false

[[ ${count_diff} -gt 0 || -n $(git status -s) ]] && release_version="sha-$(git rev-parse --short HEAD)-next"
[[ ${count_diff} -gt 0 ]] && release_version+="-${count_diff:?}"
[[ -n $(git status -s) ]] && release_version+="-dirty"
[[ "${release_version:?}" == "${git_tag:?}" ]] && tag_latest=true

export BASEOPS_VERSION='v1-alpha.4' # The base image version to use
export BASEOPS_CLI_PLATFORMS="linux/arm64,linux/amd64"
export BASEOPS_CLI_IMAGE="kristofferahl/baseops-cli"
export BASEOPS_CLI_VERSION="${release_version:?}"

run_build() {
  if [[ ${BASEOPS_DEV_MODE:-false} == true ]]; then
    echo "Building image (dev mode)..."
    export DOCKER_BUILDKIT=1
    docker build --platform "linux/${BASEOPS_DEV_ARCH:-arm64}" --build-arg "BASEOPS_CLI_IMAGE=${BASEOPS_CLI_IMAGE:?}" --build-arg="BASEOPS_CLI_VERSION=${BASEOPS_CLI_VERSION:?}" --build-arg "BASEOPS_VERSION=${BASEOPS_VERSION:?}" -t "${BASEOPS_CLI_IMAGE:?}:${BASEOPS_CLI_VERSION:?}" .
  else
    echo "BASEOPS_DEV_MODE is not set to true, skipping build..."
  fi
}

run_test() {
  run_build

  echo
  echo "Running container ${BASEOPS_CLI_IMAGE:?}/${BASEOPS_CLI_VERSION:?} ... $*"
  echo
  docker run --rm -it \
    -v "/${PWD:?}:/work" \
    -e "OUTPUT_DIR=/work/generated" \
    --pull missing \
    "${BASEOPS_CLI_IMAGE:?}:${BASEOPS_CLI_VERSION:?}" \
    "${@}"

  echo "Exit code: $?"
}

run_release() {
  echo
  echo "Releasing image ${BASEOPS_CLI_IMAGE:?}:${BASEOPS_CLI_VERSION:?}"
  echo -n "Continue? [y/N]: " && read -r OK
  grep -iq "^y" <<<"${OK:-}" || exit 1

  echo "Setting up buildx builder..."
  if ! docker buildx use mpb-baseops &>/dev/null; then
    docker buildx create --use --platform "${BASEOPS_CLI_PLATFORMS:?}" --name mpb-baseops
    docker buildx inspect --bootstrap
  fi

  echo
  echo "Building image ${BASEOPS_CLI_IMAGE:?}:${BASEOPS_CLI_VERSION:?}..."
  docker buildx build --push --platform "${BASEOPS_CLI_PLATFORMS:?}" --build-arg "BASEOPS_CLI_IMAGE=${BASEOPS_CLI_IMAGE:?}" --build-arg="BASEOPS_CLI_VERSION=${BASEOPS_CLI_VERSION:?}" --build-arg "BASEOPS_VERSION=${BASEOPS_VERSION:?}" -t "${BASEOPS_CLI_IMAGE:?}:${BASEOPS_CLI_VERSION:?}" .

  if [[ ${tag_latest:?} == true ]]; then
    docker buildx build --push --platform "${BASEOPS_CLI_PLATFORMS:?}" --build-arg "BASEOPS_CLI_IMAGE=${BASEOPS_CLI_IMAGE:?}" --build-arg="BASEOPS_CLI_VERSION=${BASEOPS_CLI_VERSION:?}" --build-arg "BASEOPS_VERSION=${BASEOPS_VERSION:?}" -t "${BASEOPS_CLI_IMAGE:?}:latest" .
  fi
}

main() {
  local command="${1:-}"
  shift || true

  case "${command:-}" in
    build) run_build "$@" ;;
    test) run_test "$@" ;;
    release) run_release "$@" ;;
    *) echo "Unknown command: ${command:-}" && exit 1 ;;
  esac
}

main "$@"
